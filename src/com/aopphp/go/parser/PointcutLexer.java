/* The following code was generated by JFlex 1.4.3 on 11.05.15 10:35 */

package com.aopphp.go.parser;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.aopphp.go.psi.PointcutTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11.05.15 10:35 from the specification file
 * <tt>H:/Work/go-aop-framework-plugin/src/com/aopphp/go/parser/PointcutLexer.flex</tt>
 */
public class PointcutLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\0\1\1\1\1\22\0\1\1\7\0\1\10"+
    "\1\11\1\15\1\16\1\0\1\12\1\0\1\3\12\5\1\14\3\0"+
    "\1\13\1\0\1\7\32\4\1\0\1\6\2\0\1\4\1\0\1\17"+
    "\1\36\1\20\1\37\1\21\1\35\1\4\1\32\1\26\2\4\1\33"+
    "\1\41\1\30\1\27\1\42\1\4\1\43\1\22\1\25\1\24\1\44"+
    "\1\31\1\23\1\40\1\34\4\0\201\4\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\2\1\1\10\1\11\11\3\1\12\1\13\1\14"+
    "\1\15\46\3\1\16\4\3\1\17\4\3\1\20\1\3"+
    "\1\21\6\3\1\22\1\23\7\3\1\24\2\3\1\25"+
    "\1\26\11\3\1\27\5\3\1\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\45\0\45\0\45"+
    "\0\45\0\271\0\336\0\u0103\0\45\0\u0128\0\u014d\0\u0172"+
    "\0\u0197\0\u01bc\0\u01e1\0\u0206\0\u022b\0\u0250\0\u0275\0\45"+
    "\0\45\0\45\0\u029a\0\u02bf\0\u02e4\0\u0309\0\u032e\0\u0353"+
    "\0\u0378\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u0431\0\u0456\0\u047b"+
    "\0\u04a0\0\u04c5\0\u04ea\0\u050f\0\u0534\0\u0559\0\u057e\0\u05a3"+
    "\0\u05c8\0\u05ed\0\u0612\0\u0637\0\u065c\0\u0681\0\u06a6\0\u06cb"+
    "\0\u06f0\0\u0715\0\u073a\0\u075f\0\u0784\0\u07a9\0\u07ce\0\u07f3"+
    "\0\224\0\u0818\0\u083d\0\u0862\0\u0887\0\224\0\u08ac\0\u08d1"+
    "\0\u08f6\0\u091b\0\224\0\u0940\0\224\0\u0965\0\u098a\0\u09af"+
    "\0\u09d4\0\u09f9\0\u0a1e\0\224\0\224\0\u0a43\0\u0a68\0\u0a8d"+
    "\0\u0ab2\0\u0ad7\0\u0afc\0\u0b21\0\224\0\u0b46\0\u0b6b\0\224"+
    "\0\224\0\u0b90\0\u0bb5\0\u0bda\0\u0bff\0\u0c24\0\u0c49\0\u0c6e"+
    "\0\u0c93\0\u0cb8\0\224\0\u0cdd\0\u0d02\0\u0d27\0\u0d4c\0\u0d71"+
    "\0\224";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\2\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\3\5\1\22\2\5\1\23\3\5\1\24"+
    "\1\5\1\25\2\5\1\26\2\5\46\0\2\3\45\0"+
    "\1\27\45\0\2\5\11\0\26\5\13\0\1\30\45\0"+
    "\1\31\45\0\1\32\33\0\2\5\11\0\1\5\1\33"+
    "\24\5\4\0\2\5\11\0\16\5\1\34\7\5\4\0"+
    "\2\5\11\0\4\5\1\35\21\5\4\0\2\5\11\0"+
    "\6\5\1\36\17\5\4\0\2\5\11\0\11\5\1\37"+
    "\14\5\4\0\2\5\11\0\7\5\1\40\16\5\4\0"+
    "\2\5\11\0\7\5\1\41\16\5\4\0\2\5\11\0"+
    "\21\5\1\42\4\5\4\0\2\5\11\0\5\5\1\43"+
    "\16\5\1\44\1\5\2\27\1\0\42\27\4\0\2\5"+
    "\11\0\1\5\1\45\24\5\4\0\2\5\11\0\14\5"+
    "\1\46\11\5\4\0\2\5\11\0\2\5\1\47\23\5"+
    "\4\0\2\5\11\0\1\50\25\5\4\0\2\5\11\0"+
    "\7\5\1\51\16\5\4\0\2\5\11\0\6\5\1\52"+
    "\17\5\4\0\2\5\11\0\11\5\1\53\14\5\4\0"+
    "\2\5\11\0\11\5\1\54\14\5\4\0\2\5\11\0"+
    "\17\5\1\55\6\5\4\0\2\5\11\0\7\5\1\56"+
    "\1\57\15\5\4\0\2\5\11\0\2\5\1\60\23\5"+
    "\4\0\2\5\11\0\10\5\1\61\15\5\4\0\2\5"+
    "\11\0\1\5\1\62\24\5\4\0\2\5\11\0\6\5"+
    "\1\63\17\5\4\0\2\5\11\0\6\5\1\64\17\5"+
    "\4\0\2\5\11\0\13\5\1\65\12\5\4\0\2\5"+
    "\11\0\1\66\25\5\4\0\2\5\11\0\1\67\25\5"+
    "\4\0\2\5\11\0\14\5\1\70\11\5\4\0\2\5"+
    "\11\0\25\5\1\71\4\0\2\5\11\0\6\5\1\72"+
    "\17\5\4\0\2\5\11\0\3\5\1\73\22\5\4\0"+
    "\2\5\11\0\12\5\1\74\13\5\4\0\2\5\11\0"+
    "\5\5\1\75\20\5\4\0\2\5\11\0\7\5\1\76"+
    "\16\5\4\0\2\5\11\0\7\5\1\77\16\5\4\0"+
    "\2\5\11\0\7\5\1\100\16\5\4\0\2\5\11\0"+
    "\14\5\1\101\11\5\4\0\2\5\11\0\22\5\1\102"+
    "\3\5\4\0\2\5\11\0\7\5\1\103\16\5\4\0"+
    "\2\5\11\0\1\104\25\5\4\0\2\5\11\0\2\5"+
    "\1\105\23\5\4\0\2\5\11\0\3\5\1\106\22\5"+
    "\4\0\2\5\11\0\17\5\1\107\6\5\4\0\2\5"+
    "\11\0\6\5\1\110\17\5\4\0\2\5\11\0\1\5"+
    "\1\111\24\5\4\0\2\5\11\0\1\112\25\5\4\0"+
    "\2\5\11\0\11\5\1\113\14\5\4\0\2\5\11\0"+
    "\7\5\1\114\16\5\4\0\2\5\11\0\1\5\1\115"+
    "\24\5\4\0\2\5\11\0\6\5\1\116\17\5\4\0"+
    "\2\5\11\0\1\5\1\117\24\5\4\0\2\5\11\0"+
    "\2\5\1\120\23\5\4\0\2\5\11\0\7\5\1\121"+
    "\16\5\4\0\2\5\11\0\7\5\1\122\16\5\4\0"+
    "\2\5\11\0\14\5\1\123\11\5\4\0\2\5\11\0"+
    "\1\5\1\124\24\5\4\0\2\5\11\0\2\5\1\125"+
    "\23\5\4\0\2\5\11\0\6\5\1\126\17\5\4\0"+
    "\2\5\11\0\14\5\1\127\11\5\4\0\2\5\11\0"+
    "\10\5\1\130\15\5\4\0\2\5\11\0\11\5\1\131"+
    "\14\5\4\0\2\5\11\0\7\5\1\132\16\5\4\0"+
    "\2\5\11\0\2\5\1\133\23\5\4\0\2\5\11\0"+
    "\10\5\1\134\15\5\4\0\2\5\11\0\11\5\1\135"+
    "\14\5\4\0\2\5\11\0\7\5\1\136\16\5\4\0"+
    "\2\5\11\0\15\5\1\137\10\5\4\0\2\5\11\0"+
    "\20\5\1\140\5\5\4\0\2\5\11\0\12\5\1\141"+
    "\13\5\4\0\2\5\11\0\6\5\1\142\17\5\4\0"+
    "\2\5\11\0\1\143\25\5\4\0\2\5\11\0\7\5"+
    "\1\144\16\5\4\0\2\5\11\0\6\5\1\145\17\5"+
    "\4\0\2\5\11\0\1\146\25\5\4\0\2\5\11\0"+
    "\7\5\1\147\16\5\4\0\2\5\11\0\14\5\1\150"+
    "\11\5\4\0\2\5\11\0\10\5\1\151\15\5\4\0"+
    "\2\5\11\0\7\5\1\152\16\5\4\0\2\5\11\0"+
    "\11\5\1\153\14\5\4\0\2\5\11\0\15\5\1\154"+
    "\10\5\4\0\2\5\11\0\1\155\25\5\4\0\2\5"+
    "\11\0\6\5\1\156\17\5\4\0\2\5\11\0\7\5"+
    "\1\157\16\5\4\0\2\5\11\0\10\5\1\160\15\5"+
    "\4\0\2\5\11\0\11\5\1\161\14\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3478];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\4\11\3\1\1\11\12\1\3\11"+
    "\127\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public PointcutLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PointcutLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 114) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { return com.aopphp.go.psi.PointcutTypes.WITHIN;
          }
        case 25: break;
        case 24: 
          { return com.aopphp.go.psi.PointcutTypes.STATICINITIALIZATION;
          }
        case 26: break;
        case 5: 
          { return com.aopphp.go.psi.PointcutTypes.ANNOTATION;
          }
        case 27: break;
        case 17: 
          { return com.aopphp.go.psi.PointcutTypes.PUBLIC;
          }
        case 28: break;
        case 7: 
          { return com.aopphp.go.psi.PointcutTypes.RP;
          }
        case 29: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 30: break;
        case 9: 
          { return com.aopphp.go.psi.PointcutTypes.SUBCLASSFILTER;
          }
        case 31: break;
        case 4: 
          { return com.aopphp.go.psi.PointcutTypes.NSSEPARATOR;
          }
        case 32: break;
        case 21: 
          { return com.aopphp.go.psi.PointcutTypes.PROTECTED;
          }
        case 33: break;
        case 10: 
          { return com.aopphp.go.psi.PointcutTypes.COMMENT;
          }
        case 34: break;
        case 22: 
          { return com.aopphp.go.psi.PointcutTypes.CFLOWBELOW;
          }
        case 35: break;
        case 15: 
          { return com.aopphp.go.psi.PointcutTypes.ACCESS;
          }
        case 36: break;
        case 23: 
          { return com.aopphp.go.psi.PointcutTypes.INITIALIZATION;
          }
        case 37: break;
        case 12: 
          { return com.aopphp.go.psi.PointcutTypes.STATICACCESS;
          }
        case 38: break;
        case 18: 
          { return com.aopphp.go.psi.PointcutTypes.DYNAMIC;
          }
        case 39: break;
        case 8: 
          { return com.aopphp.go.psi.PointcutTypes.ASTERISK;
          }
        case 40: break;
        case 20: 
          { return com.aopphp.go.psi.PointcutTypes.EXECUTION;
          }
        case 41: break;
        case 13: 
          { return com.aopphp.go.psi.PointcutTypes.DOUBLEASTERISK;
          }
        case 42: break;
        case 14: 
          { return com.aopphp.go.psi.PointcutTypes.FINAL;
          }
        case 43: break;
        case 19: 
          { return com.aopphp.go.psi.PointcutTypes.PRIVATE;
          }
        case 44: break;
        case 3: 
          { return com.aopphp.go.psi.PointcutTypes.NAMEPART;
          }
        case 45: break;
        case 6: 
          { return com.aopphp.go.psi.PointcutTypes.LP;
          }
        case 46: break;
        case 11: 
          { return com.aopphp.go.psi.PointcutTypes.OBJECTACCESS;
          }
        case 47: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 48: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
